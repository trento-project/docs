name: CI

on:
  push:
    branches: [main]
  pull_request:
  release:
    types: [published]
  workflow_dispatch:
  repository_dispatch:
    types: [start-ci]

env:
  ELIXIR_VERSION: 1.14.3
  OTP_VERSION: 25
  MIX_ENV: test

jobs:
  elixir-deps:
    name: Elixir dependencies (Elixir ${{ matrix.elixir }}, OTP ${{ matrix.otp }})
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - elixir: 1.14.3
            otp: 25
          - elixir: 1.13.4
            otp: 22
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}
        env:
          ImageOS: ubuntu20
      - name: Retrieve Cached Dependencies
        uses: actions/cache@v3
        id: mix-cache
        with:
          path: |
            deps
            _build/test
            priv/plts
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('mix.lock') }}
      - name: Install Dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p priv/plts
          mix local.rebar --force
          mix local.hex --force
          mix deps.get
          mix deps.compile --warnings-as-errors
          mix dialyzer --plt

  static-code-analysis:
    name: Static Code Analysis
    needs: elixir-deps
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}
        env:
          ImageOS: ubuntu20
      - name: Retrieve Elixir Cached Dependencies
        uses: actions/cache@v3
        id: mix-cache
        with:
          path: |
            deps
            _build/test
            priv/plts
          key: ${{ runner.os }}-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-${{ hashFiles('mix.lock') }}
      - name: Check for Unused Dependencies
        run: mix deps.unlock --check-unused
      - name: Check Code Format
        run: mix format --check-formatted
      - name: Run Credo
        run: mix credo --strict
      - name: Run Dialyzer
        run: mix dialyzer

  test:
    name: Test (Elixir ${{ matrix.elixir }}, OTP ${{ matrix.otp }})
    needs: elixir-deps
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - elixir: 1.14.3
            otp: 25
          - elixir: 1.13.4
            otp: 22
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}
      - name: Retrieve Cached Dependencies
        uses: actions/cache@v3
        id: mix-cache
        with:
          path: |
            deps
            _build/test
            priv/plts
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('mix.lock') }}
      - name: Run test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: mix coveralls.github --color --trace

  generate-docs:
    name: Generate project documentation
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && github.ref_name == 'main'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}
      - name: Retrieve Cached Dependencies
        uses: actions/cache@v3
        id: mix-cache
        with:
          path: |
            deps
            _build/test
            priv/plts
          key: ${{ runner.os }}-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-${{ hashFiles('mix.lock') }}
      - name: Build docs
        uses: lee-dohm/generate-elixir-docs@v1
      # Add this step if the project has OpenAPI documentation
      # Change YourProjectWeb.ApiSpec to the name of your ApiSpec module
      - name: Generate openapi.json
        run: mix openapi.spec.json --start-app=false --spec YourProjectWeb.ApiSpec
      - name: Generate Swagger UI
        uses: Legion2/swagger-ui-action@v1
        with:
          output: ./doc/swaggerui
          spec-file: openapi.json
      # End of OpenAPI documentation step
      - name: Publish to Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./doc
